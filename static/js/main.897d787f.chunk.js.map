{"version":3,"sources":["api/api.js","components/Card/Card.jsx","components/Loader/Loader.jsx","components/CardsList/CardsList.jsx","App.jsx","index.js"],"names":["request","url","a","fetch","response","ok","Error","status","statusText","json","getDate","count","data","Promise","all","results","map","item","itemInfo","name","id","type","types","result","Card","React","memo","className","src","alt","Loader","CardsList","pokemonsList","onLoadButton","isLoading","pokemon","onClick","App","useState","pokemons","setPokemons","setCount","loader","setLoader","useEffect","loadDate","dataFromServer","console","log","ReactDOM","render","document","getElementById"],"mappings":"8SAAMA,G,MAAO,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACSC,MAAM,GAAD,OAAIF,IADlB,WACRG,EADQ,QAGAC,GAHA,sBAIN,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,eAAmCH,EAASI,aAJtC,gCAOPJ,EAASK,QAPF,2CAAH,uDAUAC,EAAO,uCAAG,WAAMC,GAAN,iBAAAT,EAAA,sEACFF,EAAQ,sDAAD,OACsC,GAARW,IAFnC,cACfC,EADe,gBAKAC,QAAQC,IAC3BF,EAAKG,QAAQC,IAAb,uCAAiB,WAAMC,GAAN,eAAAf,EAAA,sEACQF,EAAQiB,EAAKhB,KADrB,cACTiB,EADS,yBAGR,CACLC,KAAMD,EAASC,KACfC,GAAIF,EAASE,GACbC,KAAMH,EAASI,QANF,2CAAjB,wDANmB,cAKfC,EALe,yBAiBdA,GAjBc,2CAAH,sD,qBCPPC,EAAOC,IAAMC,MACxB,YAA0B,IAAvBP,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIE,EAAY,EAAZA,MAGX,OACE,sBAAKK,UAAU,OAAf,UACE,qBACEA,UAAU,cACVC,IAAG,wDAAmDR,EAAnD,QACHS,IAAG,6BAAwBV,KAE7B,mBAAGQ,UAAU,aAAb,SAA2BR,IAC1BG,EAAMN,KAAI,SAAAC,GAAI,OACb,qBAEEU,UAAS,sBAAiBV,EAAKI,KAAKF,MAFtC,SAIGF,EAAKI,KAAKF,MAHNF,EAAKI,KAAKpB,cCdd6B,G,MAAS,kBACpB,qBAAKH,UAAU,SAAf,SACE,qBAAKA,UAAU,wBCANI,EAAY,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAGtD,OACE,sBAAKP,UAAU,QAAf,UACE,qBAAKA,UAAU,cAAf,SACGK,EAAahB,KAAI,SAAAmB,GAAO,OACvB,cAAC,EAAD,CAEEhB,KAAMgB,EAAQhB,KACdC,GAAIe,EAAQf,GACZE,MAAOa,EAAQd,MAHVc,EAAQf,SAOnB,wBACEO,UAAU,gBACVN,KAAK,SACLe,QAASH,EAHX,SAKGC,EACG,cAAC,EAAD,IACA,kBCgBGG,MAtCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,GAFtB,mBAEN3B,EAFM,KAEC8B,EAFD,OAGeH,oBAAS,GAHxB,mBAGNI,EAHM,KAGEC,EAHF,KAKbC,qBAAU,WACRC,IACAF,GAAU,KACT,CAAChC,IAEJ,IAIMkC,EAAQ,uCAAG,4BAAA3C,EAAA,sEACcQ,EAAQC,GADtB,OACTmC,EADS,OAGfH,GAAU,GACVH,EAAY,GAAD,mBACND,GADM,YAENO,KANU,2CAAH,qDAad,OAFAC,QAAQC,IAAIrC,GAGV,qBAAKgB,UAAU,MAAf,SACE,cAAC,EAAD,CACEK,aAAcO,EACdN,aArBS,WACbQ,EAAS9B,EAAQ,IAqBbuB,UAAWQ,OChCnBO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.897d787f.chunk.js","sourcesContent":["const request = async(url) => {\n  const response = await fetch(`${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} -- ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getDate = async(count) => {\n  const data = await request(\n    `https://pokeapi.co/api/v2/pokemon/?limit=12&offset=${count * 12}`,\n  );\n\n  const result = await Promise.all(\n    data.results.map(async(item) => {\n      const itemInfo = await request(item.url);\n\n      return {\n        name: itemInfo.name,\n        id: itemInfo.id,\n        type: itemInfo.types,\n      };\n    }),\n  );\n\n  return result;\n};\n","import React from 'react';\nimport './Card.scss';\n\nexport const Card = React.memo(\n  ({ name, id, types }) => {\n    const ww = 1;\n  \n    return (\n      <div className=\"card\">\n        <img\n          className=\"card__image\"\n          src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`}\n          alt={`here is a pict. of ${name}`}\n        />\n        <p className=\"card__name\">{name}</p>\n        {types.map(item => (\n          <div\n            key={item.type.url}\n            className={`card__type--${item.type.name}`}\n          >\n            {item.type.name}\n          </div>\n        ))}\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './CardsList.scss';\nimport { Card } from '../Card';\nimport { Loader } from '../Loader';\n\nexport const CardsList = ({ pokemonsList, onLoadButton, isLoading }) => {\n  const fdf = 1;\n\n  return (\n    <div className=\"cards\">\n      <div className=\"cards__list\">\n        {pokemonsList.map(pokemon => (\n          <Card\n            key={pokemon.id}\n            name={pokemon.name}\n            id={pokemon.id}\n            types={pokemon.type}\n          />\n        ))}\n      </div>\n      <button\n        className=\"cards__button\"\n        type=\"button\"\n        onClick={onLoadButton}\n      >\n        {isLoading\n          ? <Loader />\n          : 'Load More'\n        }\n      </button>\n    </div>\n    \n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { getDate } from './api/api';\nimport { CardsList } from './components/CardsList';\n\nfunction App() {\n  const [pokemons, setPokemons] = useState([]);\n  const [count, setCount] = useState(0);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    loadDate();\n    setLoader(true);\n  }, [count]);\n\n  const onload = () => {\n    setCount(count + 1);\n  };\n\n  const loadDate = async() => {\n    const dataFromServer = await getDate(count);\n    \n    setLoader(false);\n    setPokemons([\n      ...pokemons,\n      ...dataFromServer,\n    ]);\n  };\n\n  // eslint-disable-next-line no-console\n  console.log(count);\n\n  return (\n    <div className=\"App\">\n      <CardsList\n        pokemonsList={pokemons}\n        onLoadButton={onload}\n        isLoading={loader}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}